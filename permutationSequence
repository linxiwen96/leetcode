//The set [1,2,3,...,n] contains a total of n! unique permutations.
//By listing and labeling all of the permutations in order, 
//we get the following sequence for n = 3:
//"123"
//"132"
//"213"
//"231"
//"312"
//"321"
//Given n and k, return the kth permutation sequence.

class Solution {
public:
    string getPermutation(int n, int k) {
        string result;
        if (n == 1) {
            result = "1";
            return result;
        }
        vector<int> origin(n);
        for (int i = 1; i <= n; i++) {
            origin.push_back(i);
        }
        int next_perm = fac(n - 1);
        int remain = 0;
        int target = 0;
        while (next_perm >= 1) {
            target = k / next_perm;
            remain = k - (target) * next_perm;
            if (remain == 0) {
                result += str(origin[target - 1]);
                origin.erase(origin.begin() + target - 1);
                for (int i = origin.size() - 1; i <= 0; i--) {
                    result += str(origin[i]);
                }
                return result;
            }
        }
        
    }
};
