//Merge two sorted linked lists and return it as a new list. 
//The new list should be made by splicing together the nodes of the first two lists.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if (l1 == NULL && l2 == NULL) {
        	return NULL;
        }
        int first = 0;
        ListNode* ptr1 = l1;
        ListNode* ptr2 = l2;
        if (ptr1 == NULL) {
            first = ptr2->val;
            ptr2 = ptr2->next;
        }
        else if (ptr2 == NULL) {
	        first = ptr1->val;
            ptr1 = ptr1->next;
        }
        else if (ptr1->val > ptr2->val) {
            first = ptr2->val;
            ptr2 = ptr2->next;
        }
        else {
            first = ptr1->val;
            ptr1 = ptr1->next;
        }
        ListNode* result = new ListNode(first);
        ListNode* ptr_r = result;
        while (ptr1 != NULL || ptr2 != NULL) {
	        if (ptr1 == NULL){
                ptr_r->next = new ListNode(ptr2->val);
                ptr2 = ptr2->next;
            }
            else if (ptr2 == NULL){
                ptr_r->next = new ListNode(ptr1->val);
                ptr1 = ptr1->next;
            }
            else if (ptr1->val > ptr2->val) {
                ptr_r->next = new ListNode(ptr2->val);
                ptr2 = ptr2->next;
            }
            else {
                ptr_r->next = new ListNode(ptr1->val);
                ptr1 = ptr1->next;
            }
            ptr_r = ptr_r->next;
 	    }
        return result;
    }

};
