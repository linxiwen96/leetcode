//Add Two Numbers
//You are given two non-empty linked lists representing two non-negative integers. 
//The digits are stored in reverse order and each of their nodes contain a single digit. 
//Add the two numbers and return it as a linked list.

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* res = new ListNode(0);
        ListNode* ptr = res;
        int add = 0;
        int sum = l1->val + l2->val;
        if (sum > 9) {
            add = 1;
            sum = sum - 10;
        }
        ptr->val = sum;
        l1 = l1->next;
        l2 = l2->next;
        while (l1 or l2) {
            if (l1 == NULL) {
                sum = l2->val + add;
                l2 = l2->next;
            } 
            else if (l2 == NULL) {
                sum = l1->val + add;
                l1 = l1->next;
            }
            else {
                sum = l1->val + l2->val + add;
                l1 = l1->next;
                l2 = l2->next;
            }
            if (sum > 9) {
                add = 1;
                sum = sum - 10;
            }
            else {
                add = 0;
            }
            ptr->next = new ListNode(sum);
            ptr = ptr->next;
        }
        if (add) {
            ptr->next = new ListNode(add);
        }
        return res;
    }
};
