//Given an array nums of n integers and an integer target, 
//are there elements a, b, c, and d in nums such that a + b + c + d = target? 
//Find all unique quadruplets in the array which gives the sum of target.

//O(n^3) solution
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> result;
        if (nums.size() < 4) {
            return result;
        }
        sort(nums.begin(), nums.end());
        for (int i = 0; i < nums.size() - 3; i++) {
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            for (int j = i + 1; j < nums.size() - 2; j++) {
                if (j > i + 1 && nums[j] == nums[j - 1]) {
                    continue;
                }
                int sum = target - nums[i] - nums[j];
                int k = j + 1;
                int l = nums.size() - 1;
                while (k < l) {
                    if (nums[k] + nums[l] == sum) {
                        vector<int> res(4);
                        res[0] = nums[i];
                        res[1] = nums[j];
                        res[2] = nums[k];
                        res[3] = nums[l];
                        result.push_back(res);
                        while (k < l && nums[k] == res[2]) {
                            k++;
                        }
                        while (k < l && nums[l] == res[3]) {
                            l--;
                        }
                    }
                    else if (nums[k] + nums[l] < sum) {
                        k++;
                    }
                    else {
                        l--;
                    }
                }
            }
        }
        return result;
    }
};
