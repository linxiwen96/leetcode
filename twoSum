//Given an array of integers, return indices of the two numbers such that they add up to a specific target.

//You may assume that each input would have exactly one solution, and you may not use the same element twice.

//Brute Force
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> result(2);
        for(int i = 0; i < nums.size(); i++) {
            for(int j = i + 1; j < nums.size(); j++) {
                if (nums[i] + nums[j] == target) {
                    result[0] = i;
                    result[1] = j;
                    return result;
                }
            }
        }
        return result;
    }
};

//Two-pass Hashtable
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> map;
        vector<int> result(2);
        for(int i = 0; i < nums.size(); i++) {
            map[nums[i]] = i;
        }
        for(int i = 0; i < nums.size(); i++) {
            int temp = target - nums[i];
            if(temp != nums[i] && map.find(temp) != map.end()) {
                result[0] = i;
                result[1] = map[temp];
                return result;
            }
        }
        return result;
    }
};

//One-pass Hashtable
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> map;
        vector<int> result(2);
        for(int i = 0; i < nums.size(); i++) {
            int temp = target - nums[i];
            if(map.find(temp) != map.end()) {
                result[0] = i;
                result[1] = map[temp];
                return result;
            }
            map[nums[i]] = i;
        }
        return result;
    }
};
